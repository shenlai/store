@using Store.Web;
@using Store.Web.ProductService;
@model ProductDto
@{
    ViewBag.Title = "添加商品信息";
}
<hgroup class="title">
    <h1>@Html.Image("Product_32.png")&nbsp;@ViewBag.Title</h1>
</hgroup>
@using (Html.BeginForm("AddProduct", "Admin", FormMethod.Post, new { id = "AddProductForm", enctype = "multipart/form-data" }))
{
    @Html.ValidationSummary(true)
    <div class="editor-label">
        @Html.LabelFor(model => model.NameText)
    </div>
    <div class="editor-field">
        @Html.EditorFor(model => model.Name)
        @Html.ValidationMessageFor(model => model.NameText)
    </div>

    <div class="editor-label">
        @Html.LabelFor(model => model.DescriptionText)
    </div>
    <div class="editor-field">
        @Html.EditorFor(model => model.Description)
        @Html.ValidationMessageFor(model => model.DescriptionText)
    </div>

    <div class="editor-label">
        @Html.LabelFor(model => model.UnitPriceText)
    </div>
    <div class="editor-field">
        @Html.EditorFor(model => model.UnitPrice)
        @Html.ValidationMessageFor(model => model.UnitPriceText)
    </div>

    <div class="editor-label">
        @Html.LabelFor(model => model.Category.NameText)
    </div>
    <div class="editor-field">
        @Html.DropDownListFor(model => model.Category.Id, (IEnumerable<SelectListItem>)ViewData["categories"])
    </div>

    <table id="productImageTable">
        <tr>
            <td>
                <div class="editor-label" style="width: 140px;">
                    @Html.LabelFor(model => model.ImageUrlText)
                </div>
            </td>
            <td>
                @Html.HiddenFor(model => model.ImageUrl, new { id = "productImageUrl" })
            </td>
        </tr>
        <tr>
            <td>
                <div class="editor-field" style="width: 140px;">
                    @Html.ProductImage("ProductImage.png", ImageSize.Medium, new { id = "productImage" })
                </div>
            </td>
            <td style="vertical-align: top; text-align: center;">
                <input type="file" name="productImageFile" id="productImageFile" />
            </td>
        </tr>
    </table>

    <div class="editor-label">
        @Html.LabelFor(model => model.IsNewText)
    </div>
    <div class="editor-field">
        @Html.EditorFor(model => model.IsNew)
        @Html.ValidationMessageFor(model => model.IsNewText)
    </div>
}
<p>
    <span>@Html.ImageSubmitButton("AddProductForm", Url.Content("~/Images/Save.png"), "保存", "保存更改")</span>
    <span>&nbsp;</span>
    <span>@Html.ImageActionLink(Url.Content("~/Images/Cancel.png"), "取消编辑", "取消编辑", "Products", "Admin")</span>
</p>

@section scripts
{
    <script type="text/javascript">
        $(function () {
            $("#Name").focus();
            /*上传空间jquery.uploadify:http://www.cnblogs.com/mofish/archive/2012/11/30/2796698.html */
            $("#productImageFile").uploadify({
                'buttonText': '选择图片',
                'fileTypeDesc': 'Image Files',//可选文件的描述。这个值出现在文件浏览窗口中的文件类型下拉选项中。（chrome下不支持，会显示为'自定义文件',ie and firefox下可显示描述）
                'fileTypeExts': '*.gif; *.jpg; *.png',////设置允许上传的文件扩展名（也就是文件类型）。但手动键入文件名可以绕过这种级别的安全检查，所以你应该始终在服务端中检查文件类型。输入多个扩展名时用分号隔开('*.jpg;*.png;*.gif')
                'method': 'post',
                'swf': '@Url.Content("~/Content/uploadify.swf")?ver='+ Math.random(),//swf的相对路径，必写项
                'uploader': '@Url.Action("Upload", "Admin")',   //服务器端脚本文件路径，必写项
                'width': 80,
                'height': 20,
                'preventCaching': true, //是否缓存swf文件。默认为true，会给swf的url地址设置一个随机数，这样它就不会被缓存。(有些浏览器缓存了swf文件就会触发不了里面的事件--by rainweb)
                'onUploadSuccess': function (file, data, response) {
                    $("#productImage").attr("src", '@Url.ProductImagePath()' + data + '?' + Math.random().toString());
                    $("#productImageUrl").val(data);
                }
            });

            //$("#SWFUpload_0").hide();
        });
    </script>
}
