<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <configSections>
    <section name="unity" type="Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Microsoft.Practices.Unity.Configuration" />
  </configSections>

  <unity xmlns="http://schemas.microsoft.com/practices/2010/unity">
    <sectionExtension type="Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionConfigurationExtension, Microsoft.Practices.Unity.Interception.Configuration" />
    <container>
      <extension type="Interception" />

      <!--Cache Provider-->
      <register type="Store.Infrastructure.Caching.ICacheProvider, Store.Infrastructure" mapTo="Store.Infrastructure.Caching.EntLibCacheProvider, Store.Infrastructure" />
      
      <!--仓储接口的注册-->
      <register type="Store.Domain.Repositories.IRepositoryContext, Store.Domain" mapTo="Store.Repositories.EntityFramework.EntityFrameworkRepositoryContext, Store.Repositories">
        <lifetime type="singleton" />
      </register>
      <register type="Store.Domain.Repositories.IProductRepository, Store.Domain" mapTo="Store.Repositories.EntityFramework.ProductRepository, Store.Repositories" />
      <register type="Store.Domain.Repositories.IOrderRepository, Store.Domain" mapTo="Store.Repositories.EntityFramework.OrderRepository, Store.Repositories" />
      <register type="Store.Domain.Repositories.ICategoryRepository, Store.Domain" mapTo="Store.Repositories.EntityFramework.CategoryRepository, Store.Repositories" />
      <register type="Store.Domain.Repositories.IProductCategorizationRepository, Store.Domain" mapTo="Store.Repositories.EntityFramework.ProductCategorizationRepository, Store.Repositories" />
      <register type="Store.Domain.Repositories.IShoppingCartItemRepository, Store.Domain" mapTo="Store.Repositories.EntityFramework.ShoppingCartItemRepository, Store.Repositories" />
      <register type="Store.Domain.Repositories.IShoppingCartRepository, Store.Domain" mapTo="Store.Repositories.EntityFramework.ShoppingCartRepository, Store.Repositories" />
      <register type="Store.Domain.Repositories.IUserRepository, Store.Domain" mapTo="Store.Repositories.EntityFramework.UserRepository, Store.Repositories" />
      <register type="Store.Domain.Repositories.IRoleRepository, Store.Domain" mapTo="Store.Repositories.EntityFramework.RoleRepository, Store.Repositories" />
      <register type="Store.Domain.Repositories.IUserRoleRepository, Store.Domain" mapTo="Store.Repositories.EntityFramework.UserRoleRepository, Store.Repositories" />

      <!--Domain Services-->
      <register type="Store.Domain.Services.IDomainService, Store.Domain" mapTo="Store.Domain.Services.DomainService, Store.Domain" />

      <!--应用服务的注册-->
      <!--<register type="Store.ServiceContracts.IProductService, Store.ServiceContracts" mapTo="Store.Application.ServiceImplementations.ProductServiceImp, Store.Application" />
      <register type="Store.ServiceContracts.IOrderService, Store.ServiceContracts" mapTo="Store.Application.ServiceImplementations.OrderServiceImpl, Store.Application" />
      <register type="Store.ServiceContracts.IUserService, Store.ServiceContracts" mapTo="Store.Application.ServiceImplementations.UserServiceImpl, Store.Application" />-->
      <register type="Store.ServiceContracts.IProductService, Store.ServiceContracts" mapTo="Store.Application.ServiceImplementations.ProductServiceImp, Store.Application" >
        <!--注入AOP功能的实现-->
        <interceptor type="InterfaceInterceptor" />
        <interceptionBehavior type="Store.Infrastructure.InterceptionBehaviors.EntLibCacheBehavior, Store.Infrastructure" />
        <interceptionBehavior type="Store.Infrastructure.InterceptionBehaviors.ExceptionLoggingBehavior, Store.Infrastructure" />
      </register>
      <register type="Store.ServiceContracts.IOrderService, Store.ServiceContracts" mapTo="Store.Application.ServiceImplementations.OrderServiceImpl, Store.Application" />
      <register type="Store.ServiceContracts.IUserService, Store.ServiceContracts" mapTo="Store.Application.ServiceImplementations.UserServiceImpl, Store.Application" />

      <!-- **************注意泛型注入的子写法*************** -->

      <!--Domain Event Handlers -->
      <register type="Store.Domain.Events.IDomainEventHandler`1[[Store.Domain.Events.OrderDispatchedEvent, Store.Domain]], Store.Domain"
                mapTo="Store.Domain.Events.EventHandlers.OrderDispatchedEventHandler, Store.Domain" 
                name="OrderDispatchedEventHandler" />

      <!--Event Handlers-->
      <register type="Store.Events.IEventHandler`1[[Store.Domain.Events.OrderDispatchedEvent, Store.Domain]], Store.Events"
                mapTo="Store.Events.Handlers.SendEmailHandler, Store.Events.Handlers" 
                name="orderSendEmailHandler" />
      <!-- Event Bus--><!--
      <register type="Store.Events.Bus.IEventBus,Store.Events" mapTo="Store.Events.Bus.EventBus,Store.Events">
        <lifetime type="singleton" />
      </register>-->
      
      <!--Event Aggregator-->
      <register type="Store.Events.IEventAggregator, Store.Events" mapTo="Store.Events.EventAggregator, Store.Events">
        <constructor>
          <param name="handlers">
            <array>
              <dependency name="orderSendEmailHandler" type="Store.Events.IEventHandler`1[[Store.Domain.Events.OrderDispatchedEvent, Store.Domain]], Store.Events" />
            </array>
          </param>
        </constructor>
      </register>
      
      <!--注入MsmqEventBus,什么时候注入？？？？？-->
      <register type="Store.Events.Bus.IEventBus, Store.Events"
                mapTo="Store.Events.Bus.MsmqEventBus, Store.Events">
        <lifetime type="singleton" />
        <constructor>
          <param name="path" value=".\Private$\BookStoreQueue" />
        </constructor>
      </register>
    </container>
  </unity>

</configuration>